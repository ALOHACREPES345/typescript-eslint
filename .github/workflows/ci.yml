name: CI

on:
  push:
    branches:
      - main
      - v5
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  PRIMARY_NODE_VERSION: 12
  NX_CLOUD_DISTRIBUTED_EXECUTION: true
  NX_VERBOSE_LOGGING: true
  # Added the - at the end to function as a separator to improve readability in the PR comment from the Nx cloud app
  NX_CLOUD_ENV_NAME: 'Node 12.x -'

jobs:
  create_nx_run_group:
    name: Create NX_RUN_GROUP
    runs-on: ubuntu-latest
    outputs:
      nx_run_group: ${{ steps.set_nx_run_group.outputs.nx_run_group }}
    steps:
      - name: Set NX_RUN_GROUP based on $GITHUB_RUN_ID and a uuid
        id: set_nx_run_group
        run: |
          NX_RUN_GROUP="$GITHUB_RUN_ID--$(uuidgen)"
          echo "::set-output name=nx_run_group::$NX_RUN_GROUP"

  primary:
    name: Primary
    needs: [create_nx_run_group]
    runs-on: ubuntu-latest
    steps:
      - name: Set NX_RUN_GROUP based on the output of the create_nx_run_group job
        run: echo "NX_RUN_GROUP=${{ needs.create_nx_run_group.outputs.nx_run_group }}" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2

      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn --ignore-engines --frozen-lockfile --ignore-scripts
          yarn check-clean-workspace-after-install

      - name: Run parallel (distributed where possible) commands for all affected projects
        uses: jameshenry/parallel-bash-commands@v1
        with:
          # Note that the typecheck target *also* typechecks tests and tools,
          # whereas the build only checks src files
          cmd1: npx nx affected --target=typecheck --parallel=3
          # Website will be built by the Netlify GitHub App
          cmd2: npx nx affected --target=build --parallel=3 --exclude website
          # Website will be tested in later step
          cmd3: npx nx affected --target=test --parallel=3 --exclude website,@typescript-eslint/eslint-plugin
          cmd4: yarn check-format
          cmd5: yarn lint-markdown
          cmd6: yarn check-spelling

      - name: tmp
        run: NX_CLOUD_DISTRIBUTED_EXECUTION=false npx nx test @typescript-eslint/eslint-plugin

      - name: tmp 2
        run: cd packages/eslint-plugin && NX_CLOUD_DISTRIBUTED_EXECUTION=false npx jest --coverage

      # Because we don't have lint targets set at a project level, lint is not a part of the Nx target graph and we therefore
      # manually ensure that this runs after the build step for now
      - name: Run linting across whole workspace
        run: yarn lint

      - name: Publish code coverage report
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: packages/**/coverage/lcov.info
          flags: unittest
          name: codecov

      - name: Stop all running agents for this CI run
        # It's important that we always run this step, otherwise in the case of any failures in preceding non-Nx steps, the agents will keep running and waste billable minutes
        if: ${{ always() }}
        run: npx nx-cloud stop-all-agents

  agents:
    name: Nx Distributed CI Agents
    needs: [create_nx_run_group]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        agent: [1, 2, 3, 4, 5, 6]
    steps:
      - name: Set NX_RUN_GROUP based on the output of the create_nx_run_group job
        run: echo "NX_RUN_GROUP=${{ needs.create_nx_run_group.outputs.nx_run_group }}" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - name: Use Node.js ${{ env.PRIMARY_NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn --ignore-engines --frozen-lockfile --ignore-scripts

      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent
